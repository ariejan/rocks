{"note":"Don't delete this file! It's used internally to help with page regeneration.","google":"UA-20357800-1","name":"Rocks","tagline":"This is a tiny library of mixins and styles for developing large-ish stylesheets with Sass","body":"# Rocks\r\n\r\nThis is a tiny library of mixins and styles for developing large-ish\r\nstylesheets with [Sass][].\r\n\r\nI extracted these styles from a bunch of larger-than-average projects I have\r\nworked on, as I found I was repeating myself over and over again. There is\r\nnothing groundbreaking in here, just a useful collection of snippets to build\r\nyour own stylesheets with.\r\n\r\nThis library does not aim to help you write CSS, but better stylesheets. It\r\nprovides re-usable components and patterns to help you simplify styling common\r\nobjects on your page.\r\n\r\nThe contents of this project are in partly homegrown and partly borrowed from\r\nprojects like [Blueprint][], [Compass][] and many others.\r\n\r\n**Note**: this is very much a work in progress. Mind the gap.\r\n\r\n# Installation \r\n\r\n## Installation for Rails 3.1+ projects\r\n\r\nInclude Rocks in your Gemfile:\r\n\r\n    gem 'rocks'\r\n\r\nLet [Bundler][] install it:\r\n\r\n\t$ bundle install\r\n\r\nMake sure your `application.css` file is compiled by Sass by renaming it to\r\n`application.css.scss`. Import the Rocks stylesheets:\r\n\r\n    @import \"rocks\";\r\n\r\nAdd your own styles and imports below that.\r\n\r\n**Note** if you also include [Bourbon][] in your project, make sure put\r\n`@import \"bourbon\";` _before_ `@import \"rocks\";`, as per its installation\r\ninstructions.\r\n\r\n## Installation for non-Rails 3.1+ projects\r\n\r\nUnsupported so far. I may write a simple installer script one day that\r\nautomatically copies all the stylesheets into a directory of your choosing. For\r\nnow, you'll have to do that manually.\r\n\r\nIf you are using Sass directly, you could try to just add the Rocks gem to\r\n`load_path`, using something like the following:\r\n\r\n```ruby\r\nSass::Engine.new(my_stylesheet,\r\n  :syntax => :scss,\r\n  :load_path => [\r\n    File.join(`bundle show rocks`, 'app', 'assets', 'stylesheets')\r\n  ]\r\n )\r\n```\r\n\r\nThis would allow you to `@import 'rocks';` in the `my_stylesheet` file.\r\n\r\n# Contents\r\n\r\n## Grid\r\n\r\nContains functions and mixins for working with a grid-based layout. The grid is\r\nbased on variables `$grid-column-width` and `$grid-margin`. It provides the\r\nfollowing functions:\r\n\r\n* `span(n)`: get a width value for `n` number of columns.\r\n* `columns(n)`: get the total width of a number of columns.\r\n\r\nThe difference between `span` and `columns` is inclusion of `$grid-margin` at\r\nthe end.\r\n\r\nIt contains the following mixins:\r\n\r\n* `column($span, $with_margin: true)`: make an element a column, spanning\r\n  `$span` number of columns.\r\n* `container`: container for `column` elements. Simply a relatively positioned\r\n  wrapped with clearfix applied.\r\n* `rcontainer`: container for `rcolumn` elements. Contains negative left\r\n  margin, that counters the left margin of the first `rcolumn` it contains.\r\n* `rcolumn($span)`: same as `column` but with margin applied to the left, so\r\n  you don't need to remove margin from the last column in a group.\r\n* `prepend($span)`: pad an element with `$span` columns to the left.\r\n* `append($span)`: pad an element with `$span` columns to the right.\r\n* `push($span)`: move an element to the right over `$span` columns.\r\n* `pull($span)`: move an element to the left over `$span` columns.\r\n\r\n## Layout\r\n\r\nContains simple layout helper mixins:\r\n\r\n* `float($dir: 'left')`: float en element left or right, including the\r\n  `display: inline` so often needed for IE.\r\n* `outdent($selector, $amount, $dir: 'left', $with-padding)`: make a child\r\n  element outdented. Useful for a story with some text and an image, where all\r\n  the text should be beside the image.\r\n* `align($dir: 'left', $v: $line, $h: $grid-margin, $mirror: false)`: float an\r\n  element with margins. Useful for left- or right floating images.\r\n* `clearfix`: clears floated elements inside.\r\n* `outset-left($gutter: $grid-margin, $with-padding)`: create an outdent to the\r\n  left, using a negative margin and opposing padding.\r\n* `outset-right($gutter: $grid-margin, $with-padding)`: create an outdent to\r\n  the right, using a negative margin and opposing padding.\r\n* `outset($gutter: $grid-marign, $with-padding: true)`: outdent to both the\r\n  left and right.\r\n* `leading($amount: $line)`: add whitespace before an element.\r\n* `trailing($amount: $line)`: add whitespace after an element.\r\n* `surrounding-lines`: adds a single line-height whitespace before and after\r\n  the element.\r\n* `voutset-top($amount, $border: 0)`: vertically outset an element, adding\r\n  negative margin and positive padding to the top.\r\n* `voutset-bottom($amount, $border: 0)`: vertically outset an element, adding\r\n  negative margin and positive padding to the bottom.\r\n* `voutset($amount, $border: 0)`: vertically outset an element by applying\r\n  negative marings and countering paddings top top and bottom.\r\n\r\nAll of `leading`, `trailing`, `voutset-top` and `voutset-bottom` can take both\r\npixel values as arguments, or a unit-less number. When given a unit-less\r\nnumber, it will be fed to the `lines` function.\r\n\r\nWhen using any of the `voutset` mixins, you can add an optional `$border`\r\nargument to reduce the amount of padding that is applied, leaving room for a\r\nborder on element while preserving vertical rhythm.\r\n\r\nIt also contains a plain class `.clearfix` that you can use in your HTML. It is\r\nmeant, however, to be used with `@extend`. When your stylesheet needs a lot of\r\nclearfixes, the end result will contain _a lot_ of duplicated code. Using\r\n`@extend .clearfix` you can define the class once, and simply apply many\r\nselectors to it.\r\n\r\n## Links\r\n\r\nProvides mixins for common link behaviours:\r\n\r\n* `link-hover`: hide underline on normal links, show it on hover and focus.\r\n* `link-colors($link, $visited, $hover, $active)`: set all colors at once.\r\n* `link-colors-lighten($color)`: use `link-colors` to use a single color for\r\n  all links, but lighten the hover, focus and active styles slightly using the\r\n  `lighten` function.\r\n* `link-colors-darken($color)`: like `link-colors-lighten` but using the\r\n  `darken` function instead of `lighten`.\r\n* `link-press`: make a link 'pressable' by offsetting it 1px in its active\r\n  state.\r\n* `link-unstyled($color: $color-text)`: make a link appear as regular text.\r\n* `link-block($target: .target)` make a link work as a block, wrapping multiple\r\n  elements that will be clickable. The (optional) target selector applies\r\n  styles to a child element that should _appear_ as a link, by extending\r\n  `.block-link-target` -- which you should define yourself.\r\n\r\n## Lists\r\n\r\nProvides basic building blocks for styling lists:\r\n\r\n* `list-no-bullets`: removes list bullets.\r\n* `list-plain`: removes bullets and spacing.\r\n* `list-inline`: removes bullets and shows elements inline.\r\n* `list-horizontal($margin: $grid-margin, $dir: 'left')`: floats all chilren to\r\n  a horizontal list.\r\n* `list-dl-table($width, $margin: $grid-margin)`: show a term and its\r\n  definition (dt and dd) on a single line.\r\n* `list-image-bullets($img, $padding: $grid-margin, $x: 0, $y: 0)`: use an\r\n  image as list bullet using the background-image technique.\r\n\r\n## Reset\r\n\r\nProvides a single `reset` mixin that reset all styles. You probably want to mix\r\nthis into your `body` selector, but you could also use it for a local reset in\r\na specific element.\r\n\r\n## Type\r\n\r\nDefines the following variables:\r\n\r\n* `$line`: the base line height of your site. Used in many different places for\r\n  marigns, paddings and heights to achieve a sensible vertical rhythm. Defaults\r\n  to `20px`.\r\n* `$size-text`: the default text size. Defaults to `14px`.\r\n* `$color-text`: the default text color. Defaults to `#444`.\r\n\r\nDefines the following functions:\r\n\r\n* `lines($n)`: returns a mutliple of `$lines`.\r\n\r\nIt defines the following mixins:\r\n\r\n* `rhythm(...)`: apply various aspects of vertical rhythm in one go,\r\n  using a combination of arguments. See the inline docs for more\r\n  information.\r\n* `text-icon($img, $padding: $grid-margin, $x: 0, $y:0)`: give an element an\r\n  icon by setting an image to the background and applying some padding.\r\n* `text-replace($img, $x: 0, $y: 0, $w: false, $h: false)`: replace an\r\n  element's text with an image by setting it to the background. You can\r\n  optionally specify width, height and background positioning.\r\n\r\n# History\r\n\r\nSee CHANGELOG.md for a full of changes.\r\n\r\n# Credits\r\n\r\n**Author**: Arjan van der Gaag  \r\n**URL**: http://arjanvandergaag.nl\r\n\r\n# License\r\n\r\nSee the LICENSE file for more information.\r\n\r\n[Sass]: http://sass-lang.com\r\n[Compass]: http://compass-style.org\r\n[Blueprint]: http://blueprintcss.org\r\n[Bourbon]: https://github.com/thoughbot/bourbon\r\n[Bundler]: http://gembundler.com\r\n"}